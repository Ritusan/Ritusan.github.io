(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{374:function(t,e,i){"use strict";i.r(e);var a=i(9),v=Object(a.a)({},function(){var t=this,e=t.$createElement,i=t._self._c||e;return i("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[i("h1",{attrs:{id:"git"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#git","aria-hidden":"true"}},[t._v("#")]),t._v(" git")]),t._v(" "),i("h2",{attrs:{id:"git-3个区"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#git-3个区","aria-hidden":"true"}},[t._v("#")]),t._v(" git 3个区")]),t._v(" "),i("blockquote",[i("p",[t._v("工作区"),i("br"),t._v("\n暂存区：作为过渡层、避免误操作、保护工作区和版本区、分支处理"),i("br"),t._v("\n版本区（版本库）")])]),t._v(" "),i("table",[i("thead",[i("tr",[i("th",[t._v("设置贡献者/别名")]),t._v(" "),i("th",{staticStyle:{"text-align":"center"}},[t._v("说明")])])]),t._v(" "),i("tbody",[i("tr",[i("td",[t._v('git config --global user.name "名字"')]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("设置用户名")])]),t._v(" "),i("tr",[i("td",[t._v('git config --global user.email "邮箱"')]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("设置邮箱")])]),t._v(" "),i("tr",[i("td",[t._v("git config --list")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("查看所有配置项")])])])]),t._v(" "),i("h2",{attrs:{id:"git常用命令"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#git常用命令","aria-hidden":"true"}},[t._v("#")]),t._v(" git常用命令")]),t._v(" "),i("table",[i("thead",[i("tr",[i("th",[t._v("常用命令")]),t._v(" "),i("th",{staticStyle:{"text-align":"center"}},[t._v("说明")])])]),t._v(" "),i("tbody",[i("tr",[i("td",[t._v("git clone + url")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("获取已有仓库的副本")])]),t._v(" "),i("tr",[i("td",[t._v("git clone -b + 分支名 + url")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("克隆指定分支到本地")])]),t._v(" "),i("tr",[i("td",[t._v("git status")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("查看当前仓库状态")])]),t._v(" "),i("tr",[i("td",[t._v("git add")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("将工作区中的文件添加到暂存区")])]),t._v(" "),i("tr",[i("td",[t._v("git add .")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("全部添加")])]),t._v(" "),i("tr",[i("td",[t._v('git commit -m " "')]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("将暂存区的文件提交到本地仓库，-m 后添加的是对文件的注释或解释说明")])]),t._v(" "),i("tr",[i("td",[t._v("git commit -a -m")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("前两步的简写")])]),t._v(" "),i("tr",[i("td",[t._v("git log")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("查看本地仓库的提交历史")])])])]),t._v(" "),i("h2",{attrs:{id:"git对比-撤销-删除-恢复命令"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#git对比-撤销-删除-恢复命令","aria-hidden":"true"}},[t._v("#")]),t._v(" git对比/撤销/删除/恢复命令")]),t._v(" "),i("table",[i("thead",[i("tr",[i("th",[t._v("对比/撤销/删除/恢复")]),t._v(" "),i("th",{staticStyle:{"text-align":"center"}},[t._v("说明")])])]),t._v(" "),i("tbody",[i("tr",[i("td",[t._v("git diff")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("工作区、暂存区对比")])]),t._v(" "),i("tr",[i("td",[t._v("git diff --cached(或者用staged)")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("暂存区、版本区对比")])]),t._v(" "),i("tr",[i("td",[t._v("git diff master")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("工作区、版本区对比")])]),t._v(" "),i("tr",[i("td",[t._v("git reset HEAD file.name(文件名称)")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("从暂存区撤销回工作区")])]),t._v(" "),i("tr",[i("td",[t._v("git checkout -- file.name")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("在工作区修改的内容撤销(还原)回最新的版本区的状态")])]),t._v(" "),i("tr",[i("td",[t._v("git commit --amend")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("（针对误提交）撤销上一次的提交，替换成新的提交")])]),t._v(" "),i("tr",[i("td",[t._v("git rm file.name")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("在工作区删除文件之后，把暂存区对应的文件删除")])]),t._v(" "),i("tr",[i("td",[t._v("git  rm -f file.name")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("删除工作区和暂存区的文件（强制删除）")])]),t._v(" "),i("tr",[i("td",[t._v("git rm --cached file.name")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("只删除暂存区的文件，工作区的文件会保留")])]),t._v(" "),i("tr",[i("td",[t._v("git checkout commit_id file.name")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("恢复对应版本的指定文件")])]),t._v(" "),i("tr",[i("td",[t._v("git reset --hard commit_id")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("恢复到指定的版本")])]),t._v(" "),i("tr",[i("td",[t._v("git reset --hard HEAD^")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("回退一个版本")])]),t._v(" "),i("tr",[i("td",[t._v("git reset --hard HEAD~num")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("回退到当前版本之前的第num个版本")])]),t._v(" "),i("tr",[i("td",[t._v("git reflog+git reset --hard commit_id")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("git reflog查看最近几次的提交记录，回退到最新的版本")])])])]),t._v(" "),i("h2",{attrs:{id:"git分支"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#git分支","aria-hidden":"true"}},[t._v("#")]),t._v(" git分支")]),t._v(" "),i("p",[t._v("分支有利于多人协作")]),t._v(" "),i("table",[i("thead",[i("tr",[i("th",[t._v("分支")]),t._v(" "),i("th",{staticStyle:{"text-align":"center"}},[t._v("说明")])])]),t._v(" "),i("tbody",[i("tr",[i("td",[t._v("git branch")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("查看所有分支")])]),t._v(" "),i("tr",[i("td",[t._v("git branch + 新分支名字")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("创建新分支")])]),t._v(" "),i("tr",[i("td",[t._v("git branch -d +分支名字")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("删除已经合并了的分支")])]),t._v(" "),i("tr",[i("td",[t._v("git branch -D +分支名字")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("强制删除还没有合并的分支")])]),t._v(" "),i("tr",[i("td",[t._v("git branch --merged")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("查看当前master分支所合并的分支")])]),t._v(" "),i("tr",[i("td",[t._v("git branch --no-merged")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("查看当前master分支所没有合并的分支")])]),t._v(" "),i("tr",[i("td",[t._v("git checkout +分支名字")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("切换到指定分支")])]),t._v(" "),i("tr",[i("td",[t._v("git checkout -b +新分支名字")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("新建分支并且切换到这个分支上")])]),t._v(" "),i("tr",[i("td",[t._v("git merge +分支名字")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("合并分支")])])])]),t._v(" "),i("h2",{attrs:{id:"git同步到远程仓库"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#git同步到远程仓库","aria-hidden":"true"}},[t._v("#")]),t._v(" git同步到远程仓库")]),t._v(" "),i("ul",[i("li",[t._v("git remote：查看远程仓库的名字，origin是默认的远程仓库名")]),t._v(" "),i("li",[t._v("git remote -v：查看远程仓库名所对应的仓库地址")]),t._v(" "),i("li",[t._v("git push origin master：往远程仓库上同步master分支")])]),t._v(" "),i("h2",{attrs:{id:"多人协作解决冲突"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#多人协作解决冲突","aria-hidden":"true"}},[t._v("#")]),t._v(" 多人协作解决冲突")]),t._v(" "),i("ul",[i("li",[t._v("git fetch：把远程仓库拉取过来之后并不合并，需要通过手动方式合并（可以查看冲突的原因）\n"),i("ul",[i("li",[t._v("git diff master origin/master：")]),t._v(" "),i("li",[t._v("git merge origin/master：")])])]),t._v(" "),i("li",[t._v("git pull：从远端拉取过来之后直接自动合并代码")])]),t._v(" "),i("h2",{attrs:{id:"github上的分支"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#github上的分支","aria-hidden":"true"}},[t._v("#")]),t._v(" github上的分支")]),t._v(" "),i("ul",[i("li",[t._v("git push origin +分支名字：把本地分支同步到远程仓库（github）上")]),t._v(" "),i("li",[t._v("github上直接创建")])]),t._v(" "),i("h2",{attrs:{id:"github上的标签（releases）"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#github上的标签（releases）","aria-hidden":"true"}},[t._v("#")]),t._v(" github上的标签（releases）")]),t._v(" "),i("ul",[i("li",[t._v("git tag：查看标签")]),t._v(" "),i("li",[t._v("git tag +标签名（版本号）：创建标签")]),t._v(" "),i("li",[t._v("git push origin +标签名（版本号）：同步到github上")]),t._v(" "),i("li",[t._v("github上直接创建")])]),t._v(" "),i("h2",{attrs:{id:"github上创建组织"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#github上创建组织","aria-hidden":"true"}},[t._v("#")]),t._v(" github上创建组织")]),t._v(" "),i("ul",[i("li",[t._v("github上创建：New organization")])]),t._v(" "),i("h2",{attrs:{id:"github上创建博客"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#github上创建博客","aria-hidden":"true"}},[t._v("#")]),t._v(" github上创建博客")]),t._v(" "),i("ul",[i("li",[t._v("github上创建")])]),t._v(" "),i("h2",{attrs:{id:"使用git遇到的问题"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#使用git遇到的问题","aria-hidden":"true"}},[t._v("#")]),t._v(" 使用git遇到的问题")]),t._v(" "),i("div",{staticClass:"tip custom-block"},[i("p",{staticClass:"custom-block-title"},[t._v("本地项目（在本地提交多次的项目）推送到远端（之前并没有在远程仓库clone）")]),t._v(" "),i("p",[t._v("git pull 失败，报错："),i("code",[t._v("fatal: refusing to merge unrelated histories")]),i("br"),t._v("\n其实这个问题是因为两个根本不相干的 git 库， 一个是本地库， 一个是远端库， 然后本地要去推送到远端， 远端觉得这个本地库跟自己不相干， 所以告知无法合并")]),t._v(" "),i("p",[t._v("第一种方法：从远端库拉下来代码 ，本地要加入的代码放到远端库下载到本地的库， 然后提交上去，因为这样的话，你基于的库就是远端的库，这是一次update。")]),t._v(" "),i("p",[t._v("第二种方法：使用强制方法：")]),t._v(" "),i("p",[t._v("git pull origin master --allow-unrelated-histories    把两段不相干的分支进行强行合并，然后再push就可以了。本地要先add，commit完了才能推送上去。")])]),t._v(" "),i("div",{staticClass:"tip custom-block"},[i("p",{staticClass:"custom-block-title"},[t._v("报错：Automatic merge failed; fix conflicts and then commit the result")]),t._v(" "),i("p",[t._v("git pull 的原理：git pull是分了两步走的，")]),t._v(" "),i("p",[t._v("从远程pull下origin/master分支"),i("br"),t._v("\n将远程的origin/master分支与本地master分支进行合并"),i("br"),t._v("\n以上的错误，是出在了第二个步骤。")]),t._v(" "),i("p",[t._v("方法：利用git status输出找原因，手动对冲突的部分进行删减修改。")])]),t._v(" "),i("div",{staticClass:"tip custom-block"},[i("p",{staticClass:"custom-block-title"},[t._v("git pull报错 fatal: The current branch master has no upstream branch")]),t._v(" "),i("p",[t._v("使用git在本地新建一个分支后，需要做远程分支关联。如果没有关联，git会在下面的操作中提示你显示的添加关联。")]),t._v(" "),i("p",[t._v("关联目的是在执行git pull, git push操作时就不需要指定对应的远程分支，你只要没有显示指定，git pull的时候，就会提示你。")]),t._v(" "),i("p",[t._v("解决方法就是按照提示添加一下：")]),t._v(" "),i("p",[i("code",[t._v("git branch --set-upstream-to=origin/远程分支名 本地分支名")])])])])},[],!1,null,null,null);e.default=v.exports}}]);