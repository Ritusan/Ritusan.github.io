(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{382:function(a,t,r){"use strict";r.r(t);var s=r(9),v=Object(s.a)({},function(){var a=this,t=a.$createElement,r=a._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[r("h1",{attrs:{id:"算法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#算法","aria-hidden":"true"}},[a._v("#")]),a._v(" 算法")]),a._v(" "),r("div",{staticClass:"tip custom-block"},[r("p",{staticClass:"custom-block-title"},[a._v("算法")]),a._v(" "),r("p",[a._v("算法是解决特定问题求解步骤的描述，在计算机中表现为指令的有限序列，并且每条指令表示一个或多个操作。"),r("br"),a._v("\n设计算法应该尽量满足时间效率高和存储量低的需求。")])]),a._v(" "),r("h2",{attrs:{id:"算法时间复杂度"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#算法时间复杂度","aria-hidden":"true"}},[a._v("#")]),a._v(" 算法时间复杂度")]),a._v(" "),r("blockquote",[r("p",[a._v("在进行算法分析时，语句总的执行次数T(n)是关于问题规模n的函数。"),r("br"),a._v("\n随问题规模n的增大，算法执行时间的增长率和f(n)的增长率相同，称作算法的渐进时间复杂度，简称时间复杂度。其中f(n)是问题规模n的某个函数。")])]),a._v(" "),r("div",{staticClass:"tip custom-block"},[r("p",[a._v("通过时间复杂度来估算算法时间效率，"),r("br"),a._v("\nT(n) = O(f(n))"),r("br"),a._v("\n用大写O()来体现算法时间复杂度的记法，称之为大O记法。"),r("br"),a._v("\n一般情况下，随着n的增大，T(n)增长最慢的算法为最优算法。")])]),a._v(" "),r("h4",{attrs:{id:"分析算法的时间复杂度："}},[r("a",{staticClass:"header-anchor",attrs:{href:"#分析算法的时间复杂度：","aria-hidden":"true"}},[a._v("#")]),a._v(" 分析算法的时间复杂度：")]),a._v(" "),r("h3",{attrs:{id:"常数阶：o-1-时间复杂度"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#常数阶：o-1-时间复杂度","aria-hidden":"true"}},[a._v("#")]),a._v(" 常数阶：O(1)时间复杂度")]),a._v(" "),r("div",{staticClass:"tip custom-block"},[r("p",[a._v("问题的大小无关n的多少，执行时间恒定的算法，称之为具有O(1)时间复杂度，又叫常数阶。")])]),a._v(" "),r("h3",{attrs:{id:"线性阶：o-n-时间复杂度"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#线性阶：o-n-时间复杂度","aria-hidden":"true"}},[a._v("#")]),a._v(" 线性阶：O(n)时间复杂度")]),a._v(" "),r("div",{staticClass:"tip custom-block"},[r("p",[a._v("循环体中的代码须要执行n次。")])]),a._v(" "),r("h3",{attrs:{id:"对数阶：o-logn-时间复杂度"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#对数阶：o-logn-时间复杂度","aria-hidden":"true"}},[a._v("#")]),a._v(" 对数阶：O(logn)时间复杂度")]),a._v(" "),r("h3",{attrs:{id:"平方阶：o-n2-时间复杂度"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#平方阶：o-n2-时间复杂度","aria-hidden":"true"}},[a._v("#")]),a._v(" 平方阶：O(n"),r("sup",[a._v("2")]),a._v(")时间复杂度")]),a._v(" "),r("div",{staticClass:"tip custom-block"},[r("p",[a._v("循环体中的代码须要执行n"),r("sup",[a._v("2")]),a._v("次。")])]),a._v(" "),r("h2",{attrs:{id:"算法空间复杂度"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#算法空间复杂度","aria-hidden":"true"}},[a._v("#")]),a._v(" 算法空间复杂度")]),a._v(" "),r("div",{staticClass:"tip custom-block"},[r("p",[a._v("算法的空间复杂度通过计算算法所需的存储空间实现，"),r("br"),a._v("\nS(n) = O(f(n))"),r("br"),a._v("\nn为问题的规模，f(n)为语句关于n所占存储空间的函数。")])]),a._v(" "),r("p",[a._v("通常都使用“时间复杂度”来指运行时间的需求，使用：“空间复杂度”指空间需求。当不用限定词地使用“复杂度”时，通常都是指时间复杂度。")]),a._v(" "),r("h2",{attrs:{id:"线性表"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#线性表","aria-hidden":"true"}},[a._v("#")]),a._v(" 线性表")]),a._v(" "),r("div",{staticClass:"tip custom-block"},[r("p",[a._v("线性表(List)：零个或多个数据元素的有限序列。"),r("br"),a._v("\n线性表元素个数n(n>=0)定义为线性表的长度，当n=0时，称为空表。"),r("br"),a._v("\n对一个线性表来说，插入数据和删除数据都是必须的操作。")])]),a._v(" "),r("h3",{attrs:{id:"线性表的顺序存储结构"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#线性表的顺序存储结构","aria-hidden":"true"}},[a._v("#")]),a._v(" 线性表的顺序存储结构")]),a._v(" "),r("div",{staticClass:"tip custom-block"},[r("p",[a._v("线性表的顺序存储结构，指的是用一段地址连续的存储单元依次存储线性表的数据元素。")])]),a._v(" "),r("p",[a._v("描述存储结构需要3个属性：")]),a._v(" "),r("ul",[r("li",[a._v("存储空间的起始位置")]),a._v(" "),r("li",[a._v("线性表的最大存储容量")]),a._v(" "),r("li",[a._v("线性表的当前长度")])]),a._v(" "),r("p",[a._v("在任意时刻，线性表的长度应该<=数组的长度。")]),a._v(" "),r("p",[a._v("用数组存储顺序意味着要分配固定长度的数组空间，由于线性表中可以进行插入和删除操作，因此分配的数组空间要>=当前线性表的长度。")]),a._v(" "),r("p",[a._v("其实，内存中的地址，就和图书馆或电影院里的座位一样，都是有编号的。存储器中的每个存储单元都有自己的编号，这个编号称为地址。")]),a._v(" "),r("p",[a._v("线性表的顺序存储结构，在存、读数据时，不管是哪个位置，时间复杂度都是O(1)；而插入或删除时，时间复杂度都是O(n)。这就说明它比较适合元素个数不太变化，更多是存取数据的应用。")]),a._v(" "),r("h3",{attrs:{id:"线性表的链式存储结构"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#线性表的链式存储结构","aria-hidden":"true"}},[a._v("#")]),a._v(" 线性表的链式存储结构")]),a._v(" "),r("h4",{attrs:{id:"单链表"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#单链表","aria-hidden":"true"}},[a._v("#")]),a._v(" 单链表")]),a._v(" "),r("p",[a._v("线性表的顺序存储结构最大的缺点是插入和删除时需要移动大量元素。")]),a._v(" "),r("p",[a._v("我们把存储数据元素信息的域称为数据域，把存储直接后继位置的域称为指针域。指针域中存储的信息称作指针或链。这两部分信息组成数据元素的存储映像，称为结点(Node)。")]),a._v(" "),r("p",[a._v("由于单链表的结构中没有定义表长，所以不能事先知道要循环多少次，其主要核心思想是“工作指针后移”。")]),a._v(" "),r("p",[a._v("如果我们希望从第i个位置，插入10个结点，对于顺序存储结构意味着，每一次插入都要移动n-1个结点，每次都是O(n)。而单链表，我们只需要在第一次时，找到第i个位置的指针，此时为O(n)，接下来只是简单地通过赋值移动指针而已，时间复杂度都是O(1)。")]),a._v(" "),r("p",[a._v("对于插入或删除数据越频繁的操作，单链表的效率优势就越明显。")]),a._v(" "),r("h3",{attrs:{id:"静态链表"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#静态链表","aria-hidden":"true"}},[a._v("#")]),a._v(" 静态链表")]),a._v(" "),r("blockquote",[r("p",[a._v("用数组描述的链表叫做静态链表。或叫游标实现法。")])]),a._v(" "),r("p",[a._v("让数组的元素都是由两个域组成，data和cur。也就是说，数组的每个下标都对应一个data和cur。数据域data用来存放数据元素，也就是通常我们要处理的数据；cur相当于单链表中的next指针，存放该元素的后继在数组中的下标，把cur叫做游标。")]),a._v(" "),r("p",[a._v("在插入和删除时，只需要修改游标，不需要移动元素，从而改进了在顺序存储结构中的插入和删除操作需要移动大量元素的缺点。但是没有解决连续存储分配带来的表长难以确定的问题。")]),a._v(" "),r("h3",{attrs:{id:"循环链表"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#循环链表","aria-hidden":"true"}},[a._v("#")]),a._v(" 循环链表")]),a._v(" "),r("blockquote",[r("p",[a._v("将单链表中终端结点的指针端由空指针改为指向头结点，就使整个单链表形成一个环，这种头尾相接的单链表称为单循环链表，简称循环链表。")])]),a._v(" "),r("p",[a._v("循环链表和单链表的主要差异在于循环的判断条件上，原来是判断p->next是否为空，现在则是p->next不等于头结点，则循环未结束。")]),a._v(" "),r("h3",{attrs:{id:"双向链表"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#双向链表","aria-hidden":"true"}},[a._v("#")]),a._v(" 双向链表")]),a._v(" "),r("p",[a._v("在单链表中，有了next指针，这就使得我们要查找下一结点的时间复杂度为O(1)，可是如果我们要查找的是上一结点的话，那最坏的时间复杂度就是O(n)了，因为我们每次都要从头开始遍历查找。")]),a._v(" "),r("p",[a._v("为了克服单向性这一缺点，设计出了双向链表，双向链表是在单链表的每个结点中，再设置一个指向前驱结点的指针域。所以在双向链表中的结点都有两个指针域，一个指向直接后继，另一个指向直接前驱。")]),a._v(" "),r("h2",{attrs:{id:"栈与队列"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#栈与队列","aria-hidden":"true"}},[a._v("#")]),a._v(" 栈与队列")]),a._v(" "),r("h3",{attrs:{id:"栈的定义"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#栈的定义","aria-hidden":"true"}},[a._v("#")]),a._v(" 栈的定义")]),a._v(" "),r("div",{staticClass:"tip custom-block"},[r("p",[a._v("栈是限定仅在表尾进行插入和删除操作的线性表。")])]),a._v(" "),r("p",[a._v("把运行插入和删除的一端称为栈顶(top)，另一端称为栈底(bottom)，不含任何数据元素的栈称为空栈。"),r("br"),a._v("\n栈又称后进先出(Last In First Out)的线性表，简称LIFO。")]),a._v(" "),r("p",[a._v("栈的插入操作(push)，叫做进栈，也称压栈、入栈，类似子弹入弹夹。"),r("br"),a._v("\n栈的删除操作(pop)，叫做出栈，也称弹栈，类似子弹出弹夹。")]),a._v(" "),r("h3",{attrs:{id:"栈的顺序存储结构"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#栈的顺序存储结构","aria-hidden":"true"}},[a._v("#")]),a._v(" 栈的顺序存储结构")]),a._v(" "),r("p",[a._v("进栈操作push。"),r("br"),a._v("\n出栈操作pop。"),r("br"),a._v("\n两者没有涉及到任何循环语句，因此时间复杂度都是O(1)。")]),a._v(" "),r("h3",{attrs:{id:"栈的链式存储结构"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#栈的链式存储结构","aria-hidden":"true"}},[a._v("#")]),a._v(" 栈的链式存储结构")]),a._v(" "),r("p",[a._v("栈的链式存储结构，简称链栈。")]),a._v(" "),r("p",[a._v("进栈操作：将栈顶指针移到插入的新元素上。"),r("br"),a._v("\n出栈操作：将栈顶指针下移一位，释放要删出的元素。"),r("br"),a._v("\n没有任何循环操作，时间复杂度都是O(1)。")]),a._v(" "),r("h3",{attrs:{id:"栈的应用——递归"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#栈的应用——递归","aria-hidden":"true"}},[a._v("#")]),a._v(" 栈的应用——递归")]),a._v(" "),r("div",{staticClass:"tip custom-block"},[r("p",{staticClass:"custom-block-title"},[a._v("递归")]),a._v(" "),r("p",[a._v("把一个直接调用自己或通过一系列的调用语句间接地调用自己的函数，称作递归函数。"),r("br"),a._v("\n每个递归定义必须有一个结束条件，即满足条件时不再递归返回值退出。"),r("br"),a._v("\n例子：斐波那契数列。")])]),a._v(" "),r("p",[a._v("迭代和递归的区别：迭代使用的是循环结构，递归使用的是选择结构。")]),a._v(" "),r("h3",{attrs:{id:"栈的应用——四则运算表达式求值"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#栈的应用——四则运算表达式求值","aria-hidden":"true"}},[a._v("#")]),a._v(" 栈的应用——四则运算表达式求值")]),a._v(" "),r("p",[a._v("我们把平时所用的标准四则运算表达式叫做中缀表达式，因为所有的运算符号都在两数字的中间。"),r("br"),a._v("\n一种不需要括号的后缀表达法，称为逆波兰表示。")]),a._v(" "),r("h3",{attrs:{id:"队列的定义"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#队列的定义","aria-hidden":"true"}},[a._v("#")]),a._v(" 队列的定义")]),a._v(" "),r("div",{staticClass:"tip custom-block"},[r("p",[a._v("队列是只允许在一端进行插入、而在另一端进行删除操作的线性表。")])]),a._v(" "),r("p",[a._v("队列是一种先进先出的线性表(First In First Out)，简称FIFO。"),r("br"),a._v("\n允许插入的一端称为队尾，允许删除的一端称为队头。")]),a._v(" "),r("h3",{attrs:{id:"循环队列"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#循环队列","aria-hidden":"true"}},[a._v("#")]),a._v(" 循环队列")]),a._v(" "),r("p",[a._v("把队列的这种头尾相接的顺序存储结构称为循环队列。")]),a._v(" "),r("h3",{attrs:{id:"队列的链式存储结构"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#队列的链式存储结构","aria-hidden":"true"}},[a._v("#")]),a._v(" 队列的链式存储结构")]),a._v(" "),r("p",[a._v("队列的链式存储结构，其实就是线性表的单链表，只不过它只能尾进头出而已，把它简称为链队列。")]),a._v(" "),r("h2",{attrs:{id:"串"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#串","aria-hidden":"true"}},[a._v("#")]),a._v(" 串")]),a._v(" "),r("div",{staticClass:"tip custom-block"},[r("p",[a._v("串(string)是由零个或多个字符组成的有限序列，又名叫字符串。"),r("br"),a._v("\n零个字符的串称为空串。")])]),a._v(" "),r("h3",{attrs:{id:"子串与主串"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#子串与主串","aria-hidden":"true"}},[a._v("#")]),a._v(" 子串与主串")]),a._v(" "),r("p",[a._v("串中任意个数的连续字符组成的子序列称为该串的子串，相应地，包含子串的串称为主串。"),r("br"),a._v('\n比如"over","end","lie"可以认为是"lover","friend","believe"这些单词字符串的子串。')]),a._v(" "),r("h3",{attrs:{id:"串的比较"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#串的比较","aria-hidden":"true"}},[a._v("#")]),a._v(" 串的比较")]),a._v(" "),r("p",[a._v("串的比较是通过组成的字符之间的编码来进行的，而字符编码指的是字符在对应字符集中的序号。")]),a._v(" "),r("p",[a._v("对于串的操作和线性表是由很大区别的。线性表更关注的是单个元素的操作，比如查找一个元素，插入或删除一个元素，但串中更多的是查找子串位置、得到指定位置子串、替换子串等操作。")]),a._v(" "),r("h3",{attrs:{id:"kmp模式匹配算法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#kmp模式匹配算法","aria-hidden":"true"}},[a._v("#")]),a._v(" KMP模式匹配算法")]),a._v(" "),r("p",[a._v("朴素模式匹配需要挨个遍历非常低效，而KMP算法，则可以大大避免重复遍历的情况。")]),a._v(" "),r("h2",{attrs:{id:"树"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#树","aria-hidden":"true"}},[a._v("#")]),a._v(" 树")]),a._v(" "),r("h3",{attrs:{id:"树的定义"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#树的定义","aria-hidden":"true"}},[a._v("#")]),a._v(" 树的定义")]),a._v(" "),r("div",{staticClass:"tip custom-block"},[r("p",[a._v("树(Tree)是n(>=0)个结点的有限集。n=0时为空树。"),r("br"),a._v("\n在一棵非空树中，有且仅有一个特定的称为根(Root)的结点；当n>1时，其余结点可分为m(m>0)个互不相交的有限集T1、T2……、Tm，其中每个集合本身又是一棵树，称为根的子树(SubTree)。")])]),a._v(" "),r("p",[a._v("树的结点包含一个数据元素及若干指向其子树的分支。结点拥有的子树数称为结点的度(Degree)。"),r("br"),a._v("\n度为0的结点称为叶结点或终端结点；度不为0的结点称为非终端节点或分支结点。"),r("br"),a._v("\n处根结点之外，分支结点也称为内部结点。"),r("br"),a._v("\n树的度是树内各结点的度的最大值。")]),a._v(" "),r("p",[a._v("结点的层次从根开始定义起，根为第一层，根的孩子为第二层。树中的结点的最大层次称为树的深度或高度。")]),a._v(" "),r("h3",{attrs:{id:"树的存储结构"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#树的存储结构","aria-hidden":"true"}},[a._v("#")]),a._v(" 树的存储结构")]),a._v(" "),r("p",[a._v("除了根结点外，其余每个结点不一定有孩子，但一定有且仅有一个双亲。")]),a._v(" "),r("h4",{attrs:{id:"双亲表示法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#双亲表示法","aria-hidden":"true"}},[a._v("#")]),a._v(" 双亲表示法")]),a._v(" "),r("h4",{attrs:{id:"孩子表示法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#孩子表示法","aria-hidden":"true"}},[a._v("#")]),a._v(" 孩子表示法")]),a._v(" "),r("h4",{attrs:{id:"孩子兄弟表示法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#孩子兄弟表示法","aria-hidden":"true"}},[a._v("#")]),a._v(" 孩子兄弟表示法")]),a._v(" "),r("h3",{attrs:{id:"二叉树的定义"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#二叉树的定义","aria-hidden":"true"}},[a._v("#")]),a._v(" 二叉树的定义")]),a._v(" "),r("div",{staticClass:"tip custom-block"},[r("p",[a._v("二叉树(Binary Tree)是n(n>=0)个结点的有限集合，该集合或者为空集(称为空二叉树)，或者由一个根结点和两棵互不相交的、分别称为根结点的左子树和右子树的二叉树组成。")])]),a._v(" "),r("h3",{attrs:{id:"二叉树特点"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#二叉树特点","aria-hidden":"true"}},[a._v("#")]),a._v(" 二叉树特点")]),a._v(" "),r("ul",[r("li",[a._v("每个结点最多有两棵子树，所以二叉树中不存在度>2的结点。")]),a._v(" "),r("li",[a._v("左子树和右子树是有顺序的，次序不能任意颠倒。")]),a._v(" "),r("li",[a._v("即使树中某结点只有一颗子树，也要区分它是左子树还是右子树。")])]),a._v(" "),r("h3",{attrs:{id:"特殊二叉树"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#特殊二叉树","aria-hidden":"true"}},[a._v("#")]),a._v(" 特殊二叉树")]),a._v(" "),r("ol",[r("li",[a._v("斜树"),r("br"),a._v("\n所有的结点都只有左子树的二叉树叫左斜树。"),r("br"),a._v("\n所有的结点都只有右子树的二叉树叫右斜树。"),r("br"),a._v("\n这两者统称为斜树。")]),a._v(" "),r("li",[a._v("满二叉树"),r("br"),a._v("\n在一棵二叉树中，如果所有分支结点都存在左子树和右子树，并且所有叶子都在同一层上，这样的二叉树称为满二叉树。")]),a._v(" "),r("li",[a._v("完全二叉树"),r("br"),a._v("\n满二叉树一定是一颗完全二叉树，但完全二叉树不一定是满的。"),r("br"),a._v("\n尽管不是满二叉树，只要编号是连续的，就是完全二叉树。\n如果编号出现空档，就不是完全二叉树。")])]),a._v(" "),r("h3",{attrs:{id:"二叉树的性质"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#二叉树的性质","aria-hidden":"true"}},[a._v("#")]),a._v(" 二叉树的性质")]),a._v(" "),r("ul",[r("li",[a._v("在二叉树的第 i 层上至多有 2"),r("sup",[a._v("i-1")]),a._v(" 个结点(i>=1)。")]),a._v(" "),r("li",[a._v("深度为 k 的二叉树至多有 2"),r("sup",[a._v("k-1")]),a._v(" 个结点(k>=1)(深度为 k 就是有 k 层的二叉树)。")]),a._v(" "),r("li",[a._v("对任何一颗二叉树T，如果其终端结点数为 n"),r("sub",[a._v("0")]),a._v("，度为 2 的结点数为 n"),r("sub",[a._v("2")]),a._v("，则 n"),r("sub",[a._v("0")]),a._v(" = n"),r("sub",[a._v("2")]),a._v(" + 1")]),a._v(" "),r("li",[a._v("具有 n 个结点的完全二叉树的深度为 log"),r("sub",[a._v("2")]),a._v("n + 1。\n"),r("blockquote",[r("p",[a._v("由满二叉树的定义可知，深度为 k 的满二叉树的结点数为 n = 2"),r("sup",[a._v("k-1")]),a._v("。这是最多的结点个数。"),r("br"),a._v("\n那么对于 n = 2"),r("sup",[a._v("k-1")]),a._v(" 倒推得到满二叉树的深度为 k = log"),r("sub",[a._v("2")]),a._v("(n+1)，比如结点为15的满二叉树，深度为4。"),r("br"),a._v("\n完全二叉树的叶子结点只会出现在最下面的两层。")])])])]),a._v(" "),r("h3",{attrs:{id:"二叉树的存储结构"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#二叉树的存储结构","aria-hidden":"true"}},[a._v("#")]),a._v(" 二叉树的存储结构")]),a._v(" "),r("p",[a._v("二叉树每个结点最多有两个孩子，所以为它设计一个数据域和两个指针域是比较自然的想法，我们称这样的链表为二叉链表。")]),a._v(" "),r("h3",{attrs:{id:"遍历二叉树"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#遍历二叉树","aria-hidden":"true"}},[a._v("#")]),a._v(" 遍历二叉树")]),a._v(" "),r("div",{staticClass:"tip custom-block"},[r("p",[a._v("二叉树的遍历(traversing binary tree)是指从根结点出发，按照某种次序依次访问二叉树中所有结点，使得每个结点被访问一次且仅被访问一次。")])]),a._v(" "),r("ul",[r("li",[a._v("前序遍历\n"),r("blockquote",[r("p",[a._v("规则是若二叉树为空，则空操作返回，否则先访问根结点，然后前序遍历左子树，再前序遍历右子树。遍历顺序为：ABDGHCEIF。")])])]),a._v(" "),r("li",[a._v("中序遍历\n"),r("blockquote",[r("p",[a._v("规则是若二叉树为空，则空操作返回，否则从根结点开始(注意不是先访问根结点)，中序遍历根结点的左子树，然后是访问根结点，最后再中序遍历右子树。遍历顺序为：GDHBAEICF。")])])]),a._v(" "),r("li",[a._v("后序遍历\n"),r("blockquote",[r("p",[a._v("规则是若二叉树为空，则空操作返回，否则从左到右先叶子后结点的方式遍历访问左右子树，最后是访问根结点。遍历顺序为：GHDBIEFCA。")])])]),a._v(" "),r("li",[a._v("层序遍历\n"),r("blockquote",[r("p",[a._v("规则是若二叉树为空，则空操作返回，否则从树的第一层也就是根结点开始访问，从上而下逐层遍历，在同一层中，按从左到右的顺序对结点逐个访问。遍历顺序为：ABCDEFGHI。")])])])]),a._v(" "),r("div",{staticClass:"warning custom-block"},[r("p",[a._v("已知前序和中序遍历序列，可以唯一确定一棵二叉树。"),r("br"),a._v("\n已知后序和中序遍历序列，可以唯一确定一棵二叉树。"),r("br"),a._v("\n已知前序和后序遍历序列，不能确定一棵二叉树。")])]),a._v(" "),r("h2",{attrs:{id:"图"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#图","aria-hidden":"true"}},[a._v("#")]),a._v(" 图")]),a._v(" "),r("h3",{attrs:{id:"图的定义"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#图的定义","aria-hidden":"true"}},[a._v("#")]),a._v(" 图的定义")]),a._v(" "),r("h3",{attrs:{id:"图的存储结构"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#图的存储结构","aria-hidden":"true"}},[a._v("#")]),a._v(" 图的存储结构")]),a._v(" "),r("h3",{attrs:{id:"图的遍历"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#图的遍历","aria-hidden":"true"}},[a._v("#")]),a._v(" 图的遍历")]),a._v(" "),r("h3",{attrs:{id:"最小生成树"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#最小生成树","aria-hidden":"true"}},[a._v("#")]),a._v(" 最小生成树")]),a._v(" "),r("h3",{attrs:{id:"最短路径"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#最短路径","aria-hidden":"true"}},[a._v("#")]),a._v(" 最短路径")]),a._v(" "),r("h3",{attrs:{id:"拓扑排序"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#拓扑排序","aria-hidden":"true"}},[a._v("#")]),a._v(" 拓扑排序")]),a._v(" "),r("h3",{attrs:{id:"关键路径"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#关键路径","aria-hidden":"true"}},[a._v("#")]),a._v(" 关键路径")]),a._v(" "),r("h2",{attrs:{id:"查找"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#查找","aria-hidden":"true"}},[a._v("#")]),a._v(" 查找")]),a._v(" "),r("h3",{attrs:{id:"顺序表查找"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#顺序表查找","aria-hidden":"true"}},[a._v("#")]),a._v(" 顺序表查找")]),a._v(" "),r("h3",{attrs:{id:"线性索引查找"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#线性索引查找","aria-hidden":"true"}},[a._v("#")]),a._v(" 线性索引查找")]),a._v(" "),r("h3",{attrs:{id:"二叉排序树"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#二叉排序树","aria-hidden":"true"}},[a._v("#")]),a._v(" 二叉排序树")]),a._v(" "),r("h3",{attrs:{id:"平衡二叉树-avl树"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#平衡二叉树-avl树","aria-hidden":"true"}},[a._v("#")]),a._v(" 平衡二叉树(AVL树)")]),a._v(" "),r("h3",{attrs:{id:"多路查找树-b树"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#多路查找树-b树","aria-hidden":"true"}},[a._v("#")]),a._v(" 多路查找树(B树)")]),a._v(" "),r("h3",{attrs:{id:"散列表查找-哈希表"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#散列表查找-哈希表","aria-hidden":"true"}},[a._v("#")]),a._v(" 散列表查找(哈希表)")]),a._v(" "),r("h2",{attrs:{id:"排序"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#排序","aria-hidden":"true"}},[a._v("#")]),a._v(" 排序")]),a._v(" "),r("h3",{attrs:{id:"冒泡排序"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#冒泡排序","aria-hidden":"true"}},[a._v("#")]),a._v(" 冒泡排序")]),a._v(" "),r("h3",{attrs:{id:"简单选择排序"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#简单选择排序","aria-hidden":"true"}},[a._v("#")]),a._v(" 简单选择排序")]),a._v(" "),r("h3",{attrs:{id:"直接插入排序"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#直接插入排序","aria-hidden":"true"}},[a._v("#")]),a._v(" 直接插入排序")]),a._v(" "),r("h3",{attrs:{id:"希尔排序"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#希尔排序","aria-hidden":"true"}},[a._v("#")]),a._v(" 希尔排序")]),a._v(" "),r("h3",{attrs:{id:"堆排序"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#堆排序","aria-hidden":"true"}},[a._v("#")]),a._v(" 堆排序")]),a._v(" "),r("h3",{attrs:{id:"归并排序"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#归并排序","aria-hidden":"true"}},[a._v("#")]),a._v(" 归并排序")]),a._v(" "),r("h3",{attrs:{id:"快速排序"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#快速排序","aria-hidden":"true"}},[a._v("#")]),a._v(" 快速排序")])])},[],!1,null,null,null);t.default=v.exports}}]);